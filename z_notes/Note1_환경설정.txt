[ 개발 환경 ]

	- TOOL : VS Code
	
	- node js 

		* npm(Node Package Manager) 
		- 자바스크립트 패키지 매니저
		- node js에서 사용가능한 모듈들을 패키지화 하여 모아둔 저장소 역할
		- 개발, 배포 등 다양한 환경설정 및 라이브러리(패키지) 설치 및 관리

		* yarn
		- npm 보다 수월한 패키지 관리 
		- yarn 설치 명령어
			D:\02_project\nodejs> npm install -g yarn
		
	1. react 개발 진행 시 프로젝트 초기화
		D:\02_project\nodejs\workspace\MyReactTutorial> yarn init

		* 패키지명 필수 입력
		yarn init v1.21.1
		question name (MyReactTutorial): wordcloud

		* pacagke.json 파일 생성됨
		success Saved package.json

	2. react 개발을 위한 패키지 2개 모두 설치 : react, react-dom
		D:\02_project\nodejs\workspace\MyReactTutorial> yarn add react react-dom

	3. 모듈화를 위한 webpack 관련 패키지 2개 모두 설치 : webpack, webpack-dev-server 
		- 개발환경에서 실시간 로딩으로 빠르게 개발 가능
		- 개발환경에서 사용하기 위한 것이므로 dev 옵션 사용
		- dev 옵션을 사용한 종속성 패키지는 모두 package.json 내 devDependencies 안에 기록됨
		D:\02_project\nodejs\workspace\MyReactTutorial> yarn add --dev webpack webpack-dev-server

	4. babel 설치 관련 패키지 3개 설치 : babel-core, babel-loader, babel-preset-react-app
		D:\02_project\nodejs\workspace\MyReactTutorial> yarn add --dev babel-core babel-loader babel-preset-react-app

	5. webpack-cli 패키지 설치
		D:\02_project\nodejs\workspace\MyReactTutorial> yarn add --dev webpack-cli

		* 설치한 패키지는 모두 node_modules 폴더 내 설치됨

	6. public 폴더 생성 
		- 클라이언트 화면 폴더

	7. index.html 생성 > 초기 화면용

	8. main.js 생성 > 실제 index.html에서 내부적으로 사용할 App.js를 구동할 역할

	9. App.js 생성 > 실질적 화면의 최외곽 역할

	10. webpack 설정
		- webpack.config.js 생성

	11. babelrc  설정

	12. package.json 에 사용자 스크립트 명시 

		"scripts": { // 사용자 스크립트 명시  
			"start" : "set NODE_ENV=development webpack-dev-server", // yarn start 명령어 실행 시 
			"bulid" : "set NODE_ENV=production webpack -p" // webpack을 이용해서 production 레벨의 배포 가능
		  },
	
	13. 프로그램 실행  > 실제로 컴파일 후, 프로젝트 구동
		D:\02_project\nodejs\workspace\MyReactTutorial> yarn start

	14. 웹페이지 확인
		http://localhost:8080/ 